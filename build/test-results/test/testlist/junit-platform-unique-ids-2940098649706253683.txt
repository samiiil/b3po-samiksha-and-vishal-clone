[engine:junit-jupiter]/[class:controller.TestErrorHandling]/[method:should not accept empty post body()]
[engine:junit-jupiter]/[class:controller.TestErrorHandling]/[method:should send Http 405 when using get method for user registration()]
[engine:junit-jupiter]/[class:controller.TestErrorHandling]/[method:should send invalid json when malformed json request is sent()]
[engine:junit-jupiter]/[class:controller.TestErrorHandling]/[method:should get Http 404 for invalid route()]
[engine:junit-jupiter]/[class:controller.TestFeeCollection]/[method:total fee is initially zero()]
[engine:junit-jupiter]/[class:controller.TestFeeCollection]/[method:total fee should be 2 percent of total transaction()]
[engine:junit-jupiter]/[class:controller.TestFeeCollection]/[method:total fee should be rounded and not floored()]
[engine:junit-jupiter]/[class:controller.UserControllerTest]/[method:shouldThrowErrorsForInvalidUser()]
[engine:junit-jupiter]/[class:controller.UserControllerTest]/[method:shouldRegisterAValidUser()]
[engine:junit-jupiter]/[class:controller.UserControllerTest]/[method:registerNewUserWhileOtherUsersExist()]
[engine:junit-jupiter]/[class:controller.WalletControllerTest]/[method:shouldBeAbleToAddAmount()]
[engine:junit-jupiter]/[class:controller.WalletControllerTest]/[method:shouldNotBeAbleToAddNegativeAmount()]
[engine:junit-jupiter]/[class:controller.WalletControllerTest]/[method:shouldNotAbleToAddMoreAmountThanSetLimit()]
[engine:junit-jupiter]/[class:controller.WalletControllerTest]/[method:shouldNotAbleToAddAmountForInvalidUser()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:order details for unfilled order is set correctly()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:cannot create sell order that will cause wallet limit to be exceeded()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:cannot create buy order if user doesn't have enough money in wallet()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:can create performance sell order if user has enough performance esops()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:creating sell order adds order to global sell list()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:creating buy order moves money to locked wallet()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:creating buy order adds order to global buy list()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:can log or print an order()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:can create sell order if user has enough esops()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:correct sell order is created()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:order details for fully filled order is set correctly()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:cannot create buy order that will cause inventory limit to be exceeded()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:creating sell order locks esops()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:cannot create sell order if user doesn't have enough esops in inventory()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:cannot create performance sell order if user doesn't have enough performance esops in inventory()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:correct performance sell order is created()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:order details for partially filled order is set correctly()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:creating performance sell order adds order to global performance sell list()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:correct buy order is created()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:creating performance sell order locks esops()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:order details is initially empty()]
[engine:junit-jupiter]/[class:models.TestOrderCreation]/[method:can create buy order if user has money in wallet()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:should prioritize buy order that has higher price()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:should prioritize order that came first among multiple performance ESOP sell orders irrespective of price()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:multiple buy orders by one user and one sell order by another user to fulfill them completely()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:buyer should get non-performance ESOP even if seller sells performance ESOPs()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:should prioritize performance ESOP sell orders over non-performance ESOP sell orders()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:should take sell price as order price when buy price is higher()]
[engine:junit-jupiter]/[class:models.TestOrderExecution]/[method:should prioritize sell order that has lower price()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:can create multiple users()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:user wallet and inventory are initially empty()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:can add money to wallet()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:can add performance ESOPs to inventory()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:can create new valid user()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:user email added to registered email list()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:user phone number added to registered phone number list()]
[engine:junit-jupiter]/[class:models.TestUserRegistration]/[method:can add normal ESOPs to inventory()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:first name can contain mark characters()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:should accept first name with spaces()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:first name cannot contain continuous spaces()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:first name cannot be null()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:first name cannot be less than three characters()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:first name can contain other languages()]
[engine:junit-jupiter]/[class:services.TestFirstNameValidations]/[method:first name cannot contain digits()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:last name cannot contain digits()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:last name cannot be null()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:last name cannot contain continuous spaces()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:last name should contain at least one character()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:should accept last name with spaces()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:last name can contain mark characters()]
[engine:junit-jupiter]/[class:services.TestLastNameValidations]/[method:last name can contain other languages()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should return error if country code has characters other than %2B and digit()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should return error if country code is wrong but number is valid()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should accept 13 digit phone number()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should accept 14 digit phone number ()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should not accept phone number more than 14 digit()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should accept 12 digit phone number()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should not accept phone number less than 10 digit()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should accept 11 digit phone number()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:return error for trunk code()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should accept 10 digit phone number()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should return error if there are characters in phone number()]
[engine:junit-jupiter]/[class:services.TestPhoneNumberValidations]/[method:should fail if it's 11 digit and first digit is non-zero()]
